import { describe, it, expect } from 'vitest';
import { dilithium87 } from '@scintilla-network/signatures/src/pq/dilithium87.js';
import { TEST_VECTOR } from '@scintilla-network/signatures/src/test/vectors.js';

describe('ML-DSA (Dilithium)', () => {
    describe('dilithium87', () => {
        it('should sign and verify', () => {
            const { privateKey, publicKey } = dilithium87.generateKeyPair(TEST_VECTOR.dilithiumSeed);
            expect(privateKey).toBeInstanceOf(Uint8Array);
            expect(publicKey).toBeInstanceOf(Uint8Array);
            
            const signature = dilithium87.sign(TEST_VECTOR.message, privateKey);
            expect(signature).toBeInstanceOf(Uint8Array);
            
            const isValid = dilithium87.verify(signature, TEST_VECTOR.message, publicKey);
            expect(isValid).toBe(true);
        });

        it('should validate key generation input', () => {
            expect(() => dilithium87.generateKeyPair('invalid'))
                .toThrow('seed must be a Uint8Array');
        });

        it('should validate signing input', () => {
            const { privateKey } = dilithium87.generateKeyPair();
            expect(() => dilithium87.sign('invalid', privateKey))
                .toThrow('message must be a Uint8Array');
            expect(() => dilithium87.sign(TEST_VECTOR.message, 'invalid'))
                .toThrow('privateKey must be a Uint8Array');
        });

        it('should validate verification input', () => {
            const { publicKey } = dilithium87.generateKeyPair();
            const signature = new Uint8Array(TEST_VECTOR.dilithium87.signatureSize);

            expect(() => dilithium87.verify('invalid', TEST_VECTOR.message, publicKey))
                .toThrow('signature must be a Uint8Array');
            expect(() => dilithium87.verify(signature, 'invalid', publicKey))
                .toThrow('message must be a Uint8Array');
            expect(() => dilithium87.verify(signature, TEST_VECTOR.message, 'invalid'))
                .toThrow('publicKey must be a Uint8Array');
        });

        // Test key and signature sizes
        it('should generate correct size outputs', () => {
            const { privateKey, publicKey } = dilithium87.generateKeyPair();
            expect(publicKey.length).toBe(TEST_VECTOR.dilithium87.publicKeySize);
            expect(privateKey.length).toBe(TEST_VECTOR.dilithium87.secretKeySize);

            const signature = dilithium87.sign(TEST_VECTOR.message, privateKey);
            expect(signature.length).toBe(TEST_VECTOR.dilithium87.signatureSize);
        });
    });
});
